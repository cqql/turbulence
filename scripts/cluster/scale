#!/usr/bin/env python

import fileinput
import itertools
import math
import os
import shutil
import subprocess
import sys
import time
import xml.etree.ElementTree as ET
from argparse import ArgumentParser


def parseArguments():
    parser = ArgumentParser(
        description="Perform a weak or strong scaling experiment",
        epilog="""
In the case of a strong scaling experiment, SX, SY and SZ describe the total
number of cells in the scenario. For a weak scaling experiment they give the
number of cells *per process*, so the sizes are scaled with the number of
processes in each dimension.
        """)
    parser.add_argument("--intel",
                        action="store_const",
                        const="intel",
                        dest="architecture",
                        default="intel",
                        help="Run on intel nodes")
    parser.add_argument("--amd",
                        action="store_const",
                        const="amd",
                        dest="architecture",
                        help="Run on AMD nodes")
    parser.add_argument("--strong",
                        action="store_const",
                        const="strong",
                        dest="scaling",
                        default="strong",
                        help="Perform strong scaling")
    parser.add_argument("--weak",
                        action="store_const",
                        const="weak",
                        dest="scaling",
                        help="Perform weak scaling")
    parser.add_argument("--sx",
                        type=int,
                        default=None,
                        help="Number of cells in X direction")
    parser.add_argument("--sy",
                        type=int,
                        default=None,
                        help="Number of cells in X direction")
    parser.add_argument("--sz",
                        type=int,
                        default=None,
                        help="Number of cells in X direction")
    parser.add_argument("--limit", type=int, default=8, help="Maximum exponent")
    parser.add_argument(
        "out",
        help="Directory to store job configuration and results")
    parser.add_argument("executable",
                        help="The executable to run (normally ns)")
    parser.add_argument("scenario", help="A scenario configuration file")

    (options, rest) = parser.parse_known_args()

    if os.path.exists(options.out) and len(os.listdir(options.out)) > 0:
        parser.error("Please enter an empty directory")

    dim = getdim(options.scenario)

    if not options.sx and not options.sy and not options.sz:
        (options.sx, options.sy, options.sz) = getsize(options.scenario)
    elif options.sx and options.sy:
        if dim == 2:
            options.sz = 1
        elif dim == 3 and not options.sz:
            parser.error("For a 3D simulation you have to set either all or "
                         "none of SX, SY, SZ")
    else:
        parser.error("""A 2D simulation needs either all or none of SX and SY
while a 3D simulation needs either all or none of SX, SY and SZ""")

    return (options, rest)


def primes(N):
    factors = []
    candidates = list(range(2, N + 1))

    while len(candidates) > 0:
        c = candidates.pop(0)
        candidates = [x for x in candidates if x % c != 0]
        factors.append(c)

    return factors


def primeFactors(N):
    factors = []
    candidates = primes(int(math.ceil(N / 2)))

    for c in candidates:
        while N % c == 0:
            factors.append(c)
            N = int(N / c)

    if len(factors) > 0:
        return factors
    else:
        return [N]


def balance(N, n):
    factors = primeFactors(N)
    vector = [1] * n

    while len(factors) > 0:
        f = factors.pop()
        m = min(vector)
        vector[vector.index(m)] = m * f

    return vector


def getsize(scenario):
    tree = ET.parse(scenario)
    root = tree.getroot()

    for child in root.findall("geometry"):
        sx = child.attrib["sizeX"]
        sy = child.attrib["sizeY"]
        sz = child.attrib["sizeZ"]

    return (sx, sy, sz)


def getdim(scenario):
    tree = ET.parse(scenario)
    root = tree.getroot()

    for child in root.findall("geometry"):
        return int(child.attrib["dim"])
    else:
        return 3


def main():
    (options, rest) = parseArguments()

    options.out = os.path.realpath(options.out)

    if not os.path.isdir(options.out):
        os.mkdir(options.out)

    if options.architecture == "amd":
        ranks = [1] + [x for x in range(1, options.limit + 1) if x % 4 == 0]
    elif options.architecture == "intel":
        ranks = [1] + [x for x in range(1, options.limit + 1) if x % 4 == 0]

    dimension = getdim(options.scenario)
    wdtemplate = os.path.join(options.out, "job-{}_{}-{}-{}")

    for rank in ranks:
        N = balance(rank, dimension)

        combinations = list(itertools.permutations(N, len(N)))

        # Uniquify combinations
        combinations = list(set(combinations))

        # Pad combinations to length 3
        combinations = map(tuple, [list(c) + [1] * (3 - len(c))
                                   for c in combinations])

        for combo in combinations:
            nx = combo[0]
            ny = combo[1]
            nz = combo[2]
            sx = options.sx
            sy = options.sy
            sz = options.sz

            if options.scaling == "strong":
                if sx % nx != 0:
                    sx = nx * round(sx / nx)

                if sy % ny != 0:
                    sy = ny * round(sy / ny)

                if dimension == 3 and sz % nz != 0:
                    sz = nz * round(sz / nz)

            workingdir = wdtemplate.format(rank, nx, ny, nz)
            os.makedirs(workingdir)

            logfile = os.path.join(workingdir, "scaling-log")
            run = os.path.join(
                os.path.dirname(os.path.realpath(__file__)), "run")

            command = [run, "--" + options.architecture, "--nx", nx, "--ny",
                       ny, "--nz", nz]

            if options.scaling == "strong":
                command += ["--sx", sx, "--sy", sy, "--sz", sz]
            else:
                command += ["--sx", sx * nx, "--sy", sy * ny, "--sz", sz * nz]

            command += rest + [workingdir, options.executable, options.scenario]

            with open(logfile, "w") as log:
                subprocess.call(map(str, command), stdout=log, stderr=log)


if __name__ == "__main__":
    main()
